
File: /home/stevegt/lab/fuzzy/README.md
```markdown
# Fuzzy

Fuzzy is a Go library for performing fuzzy matching on strings. The
primary function provided by this library is `Match()`, which compares
a target string against a list of candidate strings and returns
matches sorted by their similarity to the target string.

## Features

- Compute similarity scores for string matches.
- Return matches sorted by similarity score.
- Provide detailed information for each match, including:
  - The original string from the list.
  - The similarity score.
  - The number of insertions, deletions, and substitutions needed.
  - The position of the match in the provided list.

## Usage

```go
package main

import (
    "fmt"
    "github.com/stevegt/fuzzy"
)

func main() {
    target := "example"
    candidates := []string{"samples", "examples", "simple", "examine"}
    
    matches := fuzzy.Match(target, candidates)
    
    for _, match := range matches {
        fmt.Printf("String: %s, Score: %f, Insertions: %d, Deletions: %d, Substitutions: %d, Position: %d\n",
            match.Original, match.Score, match.Insertions, match.Deletions, match.Substitutions, match.Position)
    }
}
```

```
EOF_/home/stevegt/lab/fuzzy/README.md
File: /home/stevegt/lab/fuzzy/fuzzy.go
```go
package fuzzy

import (
	"sort"
)

// Match represents a result from a fuzzy match.
type Match struct {
	Original      string
	Score         float64
	Insertions    int
	Deletions     int
	Substitutions int
	Position      int
}

// Match computes the similarity scores for each candidate string and
// returns them sorted by the highest similarity to the target string.
func Match(target string, candidates []string) []Match {
	var matches []Match
	for i, candidate := range candidates {
		score, insertions, deletions, substitutions := computeScore(target, candidate)
		matches = append(matches, Match{
			Original:      candidate,
			Score:         score,
			Insertions:    insertions,
			Deletions:     deletions,
			Substitutions: substitutions,
			Position:      i,
		})
	}

	sort.Slice(matches, func(i, j int) bool {
		return matches[i].Score > matches[j].Score
	})

	return matches
}

// Placeholder for the actual implementation of the scoring algorithm.
func computeScore(target, candidate string) (float64, int, int, int) {
	// Dummy implementation: just returns zero scores for demonstration.
	return 0.0, 0, 0, 0
}
```
EOF_/home/stevegt/lab/fuzzy/fuzzy.go
File: /home/stevegt/lab/fuzzy/fuzzy_test.go
```go
package fuzzy

import (
	"testing"
)

func TestMatchBasic(t *testing.T) {
	target := "example"
	candidates := []string{"samples", "examples", "simple", "examine"}
	expected := []string{"examples", "samples", "examine", "simple"}

	matches := Match(target, candidates)
	if len(matches) != len(expected) {
		t.Fatalf("expected %d matches, got %d", len(expected), len(matches))
	}

	for i, match := range matches {
		if match.Original != expected[i] {
			t.Errorf("expected match %d to be %s, got %s", i, expected[i], match.Original)
		}
	}
}

func TestEmptyCandidates(t *testing.T) {
	target := "example"
	candidates := []string{}
	expected := 0

	matches := Match(target, candidates)
	if len(matches) != expected {
		t.Fatalf("expected %d matches, got %d", expected, len(matches))
	}
}

func TestExactMatch(t *testing.T) {
	target := "example"
	candidates := []string{"example"}
	expected := "example"

	matches := Match(target, candidates)
	if len(matches) != 1 {
		t.Fatalf("expected 1 match, got %d", len(matches))
	}

	if matches[0].Original != expected {
		t.Errorf("expected match to be %s, got %s", expected, matches[0].Original)
	}
}

func TestNoMatches(t *testing.T) {
	target := "example"
	candidates := []string{"abc", "def", "ghi"}
	expected := 0

	matches := Match(target, candidates)
	if len(matches) != expected {
		t.Fatalf("expected %d matches, got %d", expected, len(matches))
	}
}
```
EOF_/home/stevegt/lab/fuzzy/fuzzy_test.go